/*  * The MIT License * * Copyright 2019 Bryan Schorn. * * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. */package org.schorn.ella.impl.context;import java.io.File;import java.util.List;import java.util.function.Predicate;import org.schorn.ella.context.ActiveContext;import org.schorn.ella.context.ActiveContext.Action;import org.schorn.ella.context.ActiveContext.Activity;import org.schorn.ella.context.ActiveContext.Attribute;import org.schorn.ella.context.ActiveContext.Data;import org.schorn.ella.context.ActiveContext.Error;import org.schorn.ella.context.ActiveContext.Meta;import org.schorn.ella.context.ActiveContext.Property;import org.schorn.ella.context.AppContext;import org.schorn.ella.context.ContextProvider;import org.schorn.ella.http.ActiveHTTP;import org.schorn.ella.io.EndPoint;import org.schorn.ella.node.ActiveNode.ActiveRef;import org.schorn.ella.node.ActiveNode.ActiveType;import org.schorn.ella.node.ActiveNode.ArrayData;import org.schorn.ella.node.ActiveNode.ArrayType;import org.schorn.ella.node.ActiveNode.Identity;import org.schorn.ella.node.ActiveNode.ObjectData;import org.schorn.ella.node.ActiveNode.ObjectType;import org.schorn.ella.node.ActiveNode.ValueType;import org.schorn.ella.node.ActiveNode.ValueType.FieldType;import org.schorn.ella.repo.ActiveRepo;/** * * @author schorn * */class AppContextImpl implements AppContext {    private final Action action;    private final Activity activity;    private final Attribute attribute;    private final Error error;    private final Property property;    private final Data data;    private final Meta meta;    AppContextImpl(String name, ContextRole mode) throws Exception {        this.attribute = new ActiveContextImpl.AttributeImpl(this, name, mode);        this.action = new ActiveContextImpl.ActionImpl(this);        this.activity = new ContextActivityImpl(this);        this.error = mode.isInternal() && this != AppContext.Common ? null : new ActiveContextImpl.ErrorImpl(this);        this.property = new ActiveContextImpl.PropertyImpl(this);        this.data = new ContextDataImpl(this, mode.hasRepo());        this.meta = new ContextMetaImpl(this);        String activityFile = System.getProperty(AppContext.class.getSimpleName() + ".ActivityFile");        if (activityFile != null) {            activityFile = activityFile.replace("{CONTEXT}", name);            File f = new File(activityFile);            this.activity.setEndPoint(EndPoint.URIPoint.create(f.toURI()));        }    }    @Override    public void exit(String why) {        this.action.exit(why);    }    @Override    public void setEndPoint(EndPoint<?> endPoint) {        this.activity.setEndPoint(endPoint);    }    @Override    public EndPoint<?> getEndPoint() {        return this.activity.getEndPoint();    }    @Override    public boolean hasActivity() {        return this.activity.hasActivity();    }    @Override    public void reloadActivity() {        this.activity.reloadActivity();    }    @Override    public void recordActivity() throws Exception {        this.activity.recordActivity();    }    @Override    public String name() {        return this.attribute.name();    }    @Override    public int ordinal() {        return this.attribute.ordinal();    }    @Override    public ContextRole contextMode() {        return this.attribute.contextMode();    }    @Override    public boolean hasRepo() {        return this.data.hasRepo();    }    @Override    public ActiveRepo repo() {        return this.data.repo();    }    @Override    public <T> void setRepoFilter(Class<T> classOfT, Predicate<T> repoFilter) {        this.data.setRepoFilter(classOfT, repoFilter);    }    @Override    public <T> Predicate<T> getRepoFilter(Class<T> classForT) {        return this.data.getRepoFilter(classForT);    }    @Override    public ValueType valueErrorType() {        return this.error.valueErrorType();    }    @Override    public ObjectType objectErrorType() {        return this.error.objectErrorType();    }    @Override    public ArrayType arrayErrorType() {        return this.error.arrayErrorType();    }    @Override    public ObjectData createErrorObject(String errorMessage) {        return this.error.createErrorObject(errorMessage);    }    @Override    public ArrayData createErrorArray(String[] errorMessages) {        return this.error.createErrorArray(errorMessages);    }    @Override    public List<ArrayType> arrayTypes() {        return this.meta.arrayTypes();    }    @Override    public List<ObjectType> objectTypes() {        return this.meta.objectTypes();    }    @Override    public List<ValueType> valueTypes() {        return this.meta.valueTypes();    }    @Override    public List<ValueType.FieldType> fieldTypes() {        return this.meta.fieldTypes();    }    @Override    public FieldType getFieldType(String name) {        return this.meta.getFieldType(name);    }    @Override    public ValueType getValueType(String name) {        return this.meta.getValueType(name);    }    @Override    public ObjectType getObjectType(String name) {        return this.meta.getObjectType(name);    }    @Override    public ArrayType getArrayType(String name) {        return this.meta.getArrayType(name);    }    @Override    public ActiveRef getActiveRef() {        return this.meta.getActiveRef();    }    @Override    public <T> T getPropertyT(Class<T> classForT, Object propertyId) {        return this.property.getPropertyT(classForT, propertyId);    }    @Override    public String getProperty(String propertyKey) {        return this.property.getProperty(propertyKey);    }    @Override    public String getProperty(String propertyKey, String defaultValue) {        String propertyValue = this.property.getProperty(propertyKey);        if (propertyValue == null) {            return defaultValue;        }        return propertyValue;    }    @Override    public void setPropertyT(Object propertyId, Object propertyObj) {        this.property.setPropertyT(propertyId, propertyObj);    }    @Override    public void setProperty(String propertyKey, String propertyValue) {        this.property.setProperty(propertyKey, propertyValue);    }    @Override    public void open() {        this.action.open();    }    @Override    public boolean isOpen() {        return this.action.isOpen();    }    @Override    public String toString() {        return this.name();    }    @Override    public FieldType getFieldType(short activeIdx) {        return this.meta.getFieldType(activeIdx);    }    @Override    public ValueType getValueType(short activeIdx) {        return this.meta.getValueType(activeIdx);    }    @Override    public ObjectType getObjectType(short activeIdx) {        return this.meta.getObjectType(activeIdx);    }    @Override    public ArrayType getArrayType(short activeIdx) {        return this.meta.getArrayType(activeIdx);    }    @Override    public ActiveType addType(ActiveType activeType) {        return this.meta.addType(activeType);    }    @Override    public void submit(ObjectData objectData) {        this.action.submit(objectData);    }    @Override    public void load(ObjectData objectData, Identity identity) {        this.action.load(objectData, identity);    }    @Override    public ActiveHTTP.ContextServer http() {        return this.data.http();    }    @Override    public int contextIdx() {        return ContextProvider.provider().getSingleton(ActiveContext.Registry.class).getContextIdx(this);    }    @Override    public List<Identity> identities() {        return this.meta.identities();    }    @Override    public Identity addIdentity(Identity identity) {        return this.meta.addIdentity(identity);    }}